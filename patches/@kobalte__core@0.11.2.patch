diff --git a/dist/source/checkbox/checkbox-input.jsx b/dist/source/checkbox/checkbox-input.jsx
index b296f512a7d83c365ec03db6941015ad3987fe9f..6a116f3f4dbbde37c1d1d2baa4c97d596c7ac725 100644
--- a/dist/source/checkbox/checkbox-input.jsx
+++ b/dist/source/checkbox/checkbox-input.jsx
@@ -6,56 +6,130 @@
  * https://github.com/adobe/react-spectrum/blob/70e7caf1946c423bc9aa9cb0e50dbdbe953d239b/packages/@react-aria/radio/src/useCheckbox.ts
  * https://github.com/adobe/react-spectrum/blob/3155e4db7eba07cf06525747ce0adb54c1e2a086/packages/@react-aria/toggle/src/useToggle.ts
  */
-import { callHandler, mergeDefaultProps, mergeRefs, visuallyHiddenStyles, } from "@kobalte/utils";
-import { createEffect, on, splitProps } from "solid-js";
-import { createFormControlField, FORM_CONTROL_FIELD_PROP_NAMES, useFormControlContext, } from "../form-control";
+import {
+  callHandler,
+  mergeDefaultProps,
+  mergeRefs,
+  visuallyHiddenStyles,
+} from "@kobalte/utils";
+import { createEffect, on, splitProps, createSignal } from "solid-js";
+import {
+  createFormControlField,
+  FORM_CONTROL_FIELD_PROP_NAMES,
+  useFormControlContext,
+} from "../form-control";
 import { useCheckboxContext } from "./checkbox-context";
 /**
  * The native html input that is visually hidden in the checkbox.
  */
 export function CheckboxInput(props) {
-    let ref;
-    const formControlContext = useFormControlContext();
-    const context = useCheckboxContext();
-    props = mergeDefaultProps({
-        id: context.generateId("input"),
-    }, props);
-    const [local, formControlFieldProps, others] = splitProps(props, ["ref", "style", "onChange", "onFocus", "onBlur"], FORM_CONTROL_FIELD_PROP_NAMES);
-    const { fieldProps } = createFormControlField(formControlFieldProps);
-    const onChange = e => {
-        callHandler(e, local.onChange);
-        e.stopPropagation();
-        const target = e.target;
-        context.setIsChecked(target.checked);
-        // Unlike in React, inputs `checked` state can be out of sync with our toggle state.
-        // for example a readonly `<input type="checkbox" />` is always "checkable".
-        //
-        // Also, even if an input is controlled (ex: `<input type="checkbox" checked={isChecked} />`,
-        // clicking on the input will change its internal `checked` state.
-        //
-        // To prevent this, we need to force the input `checked` state to be in sync with the toggle state.
-        target.checked = context.checked();
-    };
-    const onFocus = e => {
-        callHandler(e, local.onFocus);
-        context.setIsFocused(true);
-    };
-    const onBlur = e => {
-        callHandler(e, local.onBlur);
-        context.setIsFocused(false);
-    };
-    // indeterminate is a property, but it can only be set via javascript
-    // https://css-tricks.com/indeterminate-checkboxes/
-    // Unlike in React, inputs `indeterminate` state can be out of sync with our.
-    // Clicking on the input will change its internal `indeterminate` state.
-    // To prevent this, we need to force the input `indeterminate` state to be in sync with our.
-    createEffect(on([() => ref, () => context.indeterminate(), () => context.checked()], ([ref, indeterminate]) => {
+  let ref;
+  const formControlContext = useFormControlContext();
+  const context = useCheckboxContext();
+  props = mergeDefaultProps(
+    {
+      id: context.generateId("input"),
+    },
+    props,
+  );
+  const [local, formControlFieldProps, others] = splitProps(
+    props,
+    ["ref", "style", "onChange", "onFocus", "onBlur"],
+    FORM_CONTROL_FIELD_PROP_NAMES,
+  );
+  const { fieldProps } = createFormControlField(formControlFieldProps);
+  const [isInternalChangeEvent, setIsInternalChangeEvent] = createSignal(false);
+
+  const onChange = (e) => {
+    callHandler(e, local.onChange);
+    e.stopPropagation();
+    if (!isInternalChangeEvent()) {
+      const target = e.target;
+      context.setIsChecked(target.checked);
+      // Unlike in React, inputs `checked` state can be out of sync with our toggle state.
+      // for example a readonly `<input type="checkbox" />` is always "checkable".
+      //
+      // Also, even if an input is controlled (ex: `<input type="checkbox" checked={isChecked} />`,
+      // clicking on the input will change its internal `checked` state.
+      //
+      // To prevent this, we need to force the input `checked` state to be in sync with the toggle state.
+      target.checked = context.checked();
+    }
+    setIsInternalChangeEvent(false);
+  };
+
+  createEffect(
+    on(
+      [() => context.checked(), () => context.value()],
+      (c) => {
+        console.log(c);
+        setIsInternalChangeEvent(true);
+
+        ref?.dispatchEvent(
+          new Event("input", { bubbles: true, cancelable: true }),
+        );
+        ref?.dispatchEvent(
+          new Event("change", { bubbles: true, cancelable: true }),
+        );
+      },
+      {
+        defer: true,
+      },
+    ),
+  );
+  const onFocus = (e) => {
+    callHandler(e, local.onFocus);
+    context.setIsFocused(true);
+  };
+  const onBlur = (e) => {
+    callHandler(e, local.onBlur);
+    context.setIsFocused(false);
+  };
+  // indeterminate is a property, but it can only be set via javascript
+  // https://css-tricks.com/indeterminate-checkboxes/
+  // Unlike in React, inputs `indeterminate` state can be out of sync with our.
+  // Clicking on the input will change its internal `indeterminate` state.
+  // To prevent this, we need to force the input `indeterminate` state to be in sync with our.
+  createEffect(
+    on(
+      [() => ref, () => context.indeterminate(), () => context.checked()],
+      ([ref, indeterminate]) => {
         if (ref) {
-            ref.indeterminate = !!indeterminate;
+          ref.indeterminate = !!indeterminate;
         }
-    }));
-    return (<input ref={mergeRefs(el => {
-            context.setInputRef(el);
-            ref = el;
-        }, local.ref)} type="checkbox" id={fieldProps.id()} name={formControlContext.name()} value={context.value()} checked={context.checked()} required={formControlContext.isRequired()} disabled={formControlContext.isDisabled()} readonly={formControlContext.isReadOnly()} style={{ ...visuallyHiddenStyles, ...local.style }} aria-label={fieldProps.ariaLabel()} aria-labelledby={fieldProps.ariaLabelledBy()} aria-describedby={fieldProps.ariaDescribedBy()} aria-invalid={formControlContext.validationState() === "invalid" || undefined} aria-required={formControlContext.isRequired() || undefined} aria-disabled={formControlContext.isDisabled() || undefined} aria-readonly={formControlContext.isReadOnly() || undefined} onChange={onChange} onFocus={onFocus} onBlur={onBlur} {...formControlContext.dataset()} {...context.dataset()} {...others}/>);
+      },
+    ),
+  );
+  return (
+    <input
+      ref={mergeRefs((el) => {
+        context.setInputRef(el);
+        ref = el;
+      }, local.ref)}
+      type="checkbox"
+      id={fieldProps.id()}
+      name={formControlContext.name()}
+      value={context.value()}
+      checked={context.checked()}
+      required={formControlContext.isRequired()}
+      disabled={formControlContext.isDisabled()}
+      readonly={formControlContext.isReadOnly()}
+      style={{ ...visuallyHiddenStyles, ...local.style }}
+      aria-label={fieldProps.ariaLabel()}
+      aria-labelledby={fieldProps.ariaLabelledBy()}
+      aria-describedby={fieldProps.ariaDescribedBy()}
+      aria-invalid={
+        formControlContext.validationState() === "invalid" || undefined
+      }
+      aria-required={formControlContext.isRequired() || undefined}
+      aria-disabled={formControlContext.isDisabled() || undefined}
+      aria-readonly={formControlContext.isReadOnly() || undefined}
+      onChange={onChange}
+      onFocus={onFocus}
+      onBlur={onBlur}
+      {...formControlContext.dataset()}
+      {...context.dataset()}
+      {...others}
+    />
+  );
 }
diff --git a/dist/source/radio-group/radio-group-item-input.jsx b/dist/source/radio-group/radio-group-item-input.jsx
index 8da44573030266276bc284eadcf51e71fd7f6a6c..ab213205244c411921b856e45f6d9eb456ac001c 100644
--- a/dist/source/radio-group/radio-group-item-input.jsx
+++ b/dist/source/radio-group/radio-group-item-input.jsx
@@ -5,8 +5,19 @@
  * Credits to the React Spectrum team:
  * https://github.com/adobe/react-spectrum/blob/70e7caf1946c423bc9aa9cb0e50dbdbe953d239b/packages/@react-aria/radio/src/useRadio.ts
  */
-import { callHandler, mergeDefaultProps, mergeRefs, visuallyHiddenStyles, } from "@kobalte/utils";
-import { createEffect, onCleanup, splitProps } from "solid-js";
+import {
+  callHandler,
+  mergeDefaultProps,
+  mergeRefs,
+  visuallyHiddenStyles,
+} from "@kobalte/utils";
+import {
+  createEffect,
+  on,
+  onCleanup,
+  splitProps,
+  createSignal,
+} from "solid-js";
 import { useFormControlContext } from "../form-control";
 import { useRadioGroupContext } from "./radio-group-context";
 import { useRadioGroupItemContext } from "./radio-group-item-context";
@@ -14,58 +25,115 @@ import { useRadioGroupItemContext } from "./radio-group-item-context";
  * The native html input that is visually hidden in the radio button.
  */
 export function RadioGroupItemInput(props) {
-    const formControlContext = useFormControlContext();
-    const radioGroupContext = useRadioGroupContext();
-    const radioContext = useRadioGroupItemContext();
-    props = mergeDefaultProps({
-        id: radioContext.generateId("input"),
-    }, props);
-    const [local, others] = splitProps(props, [
-        "ref",
-        "style",
-        "aria-labelledby",
-        "aria-describedby",
-        "onChange",
-        "onFocus",
-        "onBlur",
-    ]);
-    const ariaLabelledBy = () => {
-        return ([
-            local["aria-labelledby"],
-            radioContext.labelId(),
-            // If there is both an aria-label and aria-labelledby, add the input itself has an aria-labelledby
-            local["aria-labelledby"] != null && others["aria-label"] != null ? others.id : undefined,
-        ]
-            .filter(Boolean)
-            .join(" ") || undefined);
-    };
-    const ariaDescribedBy = () => {
-        return ([local["aria-describedby"], radioContext.descriptionId(), radioGroupContext.ariaDescribedBy()]
-            .filter(Boolean)
-            .join(" ") || undefined);
-    };
-    const onChange = e => {
-        callHandler(e, local.onChange);
-        e.stopPropagation();
-        radioGroupContext.setSelectedValue(radioContext.value());
-        const target = e.target;
-        // Unlike in React, inputs `checked` state can be out of sync with our state.
-        // for example a readonly `<input type="radio" />` is always "checkable".
-        //
-        // Also, even if an input is controlled (ex: `<input type="radio" checked={isChecked} />`,
-        // clicking on the input will change its internal `checked` state.
-        //
-        // To prevent this, we need to force the input `checked` state to be in sync with our state.
-        target.checked = radioContext.isSelected();
-    };
-    const onFocus = e => {
-        callHandler(e, local.onFocus);
-        radioContext.setIsFocused(true);
-    };
-    const onBlur = e => {
-        callHandler(e, local.onBlur);
-        radioContext.setIsFocused(false);
-    };
-    createEffect(() => onCleanup(radioContext.registerInput(others.id)));
-    return (<input ref={mergeRefs(radioContext.setInputRef, local.ref)} type="radio" name={formControlContext.name()} value={radioContext.value()} checked={radioContext.isSelected()} required={formControlContext.isRequired()} disabled={radioContext.isDisabled()} readonly={formControlContext.isReadOnly()} style={{ ...visuallyHiddenStyles, ...local.style }} aria-labelledby={ariaLabelledBy()} aria-describedby={ariaDescribedBy()} onChange={onChange} onFocus={onFocus} onBlur={onBlur} {...radioContext.dataset()} {...others}/>);
+  const formControlContext = useFormControlContext();
+  const radioGroupContext = useRadioGroupContext();
+  const radioContext = useRadioGroupItemContext();
+  props = mergeDefaultProps(
+    {
+      id: radioContext.generateId("input"),
+    },
+    props,
+  );
+  const [local, others] = splitProps(props, [
+    "ref",
+    "style",
+    "aria-labelledby",
+    "aria-describedby",
+    "onChange",
+    "onFocus",
+    "onBlur",
+  ]);
+  const ariaLabelledBy = () => {
+    return (
+      [
+        local["aria-labelledby"],
+        radioContext.labelId(),
+        // If there is both an aria-label and aria-labelledby, add the input itself has an aria-labelledby
+        local["aria-labelledby"] != null && others["aria-label"] != null
+          ? others.id
+          : undefined,
+      ]
+        .filter(Boolean)
+        .join(" ") || undefined
+    );
+  };
+  const ariaDescribedBy = () => {
+    return (
+      [
+        local["aria-describedby"],
+        radioContext.descriptionId(),
+        radioGroupContext.ariaDescribedBy(),
+      ]
+        .filter(Boolean)
+        .join(" ") || undefined
+    );
+  };
+  const [isInternalChangeEvent, setIsInternalChangeEvent] = createSignal(false);
+  const onChange = (e) => {
+    callHandler(e, local.onChange);
+    e.stopPropagation();
+    const target = e.target;
+    if (!isInternalChangeEvent()) {
+      radioGroupContext.setSelectedValue(radioContext.value());
+      // Unlike in React, inputs `checked` state can be out of sync with our state.
+      // for example a readonly `<input type="radio" />` is always "checkable".
+      //
+      // Also, even if an input is controlled (ex: `<input type="radio" checked={isChecked} />`,
+      // clicking on the input will change its internal `checked` state.
+      //
+      // To prevent this, we need to force the input `checked` state to be in sync with our state.
+      target.checked = radioContext.isSelected();
+    }
+    setIsInternalChangeEvent(false);
+  };
+  const onFocus = (e) => {
+    callHandler(e, local.onFocus);
+    radioContext.setIsFocused(true);
+  };
+  const onBlur = (e) => {
+    callHandler(e, local.onBlur);
+    radioContext.setIsFocused(false);
+  };
+  createEffect(
+    on(
+      [() => radioContext.isSelected(), () => radioContext.value()],
+      (c) => {
+        if (!c[0] && c[1] === radioContext.value()) return;
+        console.log(c);
+        setIsInternalChangeEvent(true);
+
+        const ref = radioContext.inputRef();
+        ref?.dispatchEvent(
+          new Event("input", { bubbles: true, cancelable: true }),
+        );
+        ref?.dispatchEvent(
+          new Event("change", { bubbles: true, cancelable: true }),
+        );
+      },
+      {
+        defer: true,
+      },
+    ),
+  );
+  createEffect(() => onCleanup(radioContext.registerInput(others.id)));
+  return (
+    <input
+      ref={mergeRefs(radioContext.setInputRef, local.ref)}
+      type="radio"
+      name={formControlContext.name()}
+      value={radioContext.value()}
+      checked={radioContext.isSelected()}
+      required={formControlContext.isRequired()}
+      disabled={radioContext.isDisabled()}
+      readonly={formControlContext.isReadOnly()}
+      style={{ ...visuallyHiddenStyles, ...local.style }}
+      aria-labelledby={ariaLabelledBy()}
+      aria-describedby={ariaDescribedBy()}
+      onChange={onChange}
+      onFocus={onFocus}
+      onBlur={onBlur}
+      {...radioContext.dataset()}
+      {...others}
+    />
+  );
 }
diff --git a/dist/source/radio-group/radio-group-item.jsx b/dist/source/radio-group/radio-group-item.jsx
index e9a7d85eaacf2cc81e228a111d7666a216ab0672..0281a1c3b95687fb51a48ab9ed667d59bbeb11e9 100644
--- a/dist/source/radio-group/radio-group-item.jsx
+++ b/dist/source/radio-group/radio-group-item.jsx
@@ -5,65 +5,86 @@
  * Credits to the React Spectrum team:
  * https://github.com/adobe/react-spectrum/blob/70e7caf1946c423bc9aa9cb0e50dbdbe953d239b/packages/@react-aria/radio/src/useRadio.ts
  */
-import { callHandler, createGenerateId, mergeDefaultProps, } from "@kobalte/utils";
+import {
+  callHandler,
+  createGenerateId,
+  mergeDefaultProps,
+} from "@kobalte/utils";
 import { createMemo, createSignal, createUniqueId, splitProps } from "solid-js";
 import { useFormControlContext } from "../form-control";
 import { Polymorphic } from "../polymorphic";
 import { createRegisterId } from "../primitives";
 import { useRadioGroupContext } from "./radio-group-context";
-import { RadioGroupItemContext, } from "./radio-group-item-context";
+import { RadioGroupItemContext } from "./radio-group-item-context";
 /**
  * The root container for a radio button.
  */
 export function RadioGroupItem(props) {
-    const formControlContext = useFormControlContext();
-    const radioGroupContext = useRadioGroupContext();
-    const defaultId = `${formControlContext.generateId("item")}-${createUniqueId()}`;
-    props = mergeDefaultProps({
-        id: defaultId,
-    }, props);
-    const [local, others] = splitProps(props, ["value", "disabled", "onPointerDown"]);
-    const [inputId, setInputId] = createSignal();
-    const [labelId, setLabelId] = createSignal();
-    const [descriptionId, setDescriptionId] = createSignal();
-    const [inputRef, setInputRef] = createSignal();
-    const [isFocused, setIsFocused] = createSignal(false);
-    const isSelected = createMemo(() => {
-        return radioGroupContext.isSelectedValue(local.value);
-    });
-    const isDisabled = createMemo(() => {
-        return local.disabled || formControlContext.isDisabled() || false;
-    });
-    const onPointerDown = e => {
-        callHandler(e, local.onPointerDown);
-        // For consistency with native, prevent the input blurs on pointer down.
-        if (isFocused()) {
-            e.preventDefault();
-        }
-    };
-    const dataset = createMemo(() => ({
-        ...formControlContext.dataset(),
-        "data-disabled": isDisabled() ? "" : undefined,
-        "data-checked": isSelected() ? "" : undefined,
-    }));
-    const context = {
-        value: () => local.value,
-        dataset,
-        isSelected,
-        isDisabled,
-        inputId,
-        labelId,
-        descriptionId,
-        inputRef,
-        select: () => radioGroupContext.setSelectedValue(local.value),
-        generateId: createGenerateId(() => others.id),
-        registerInput: createRegisterId(setInputId),
-        registerLabel: createRegisterId(setLabelId),
-        registerDescription: createRegisterId(setDescriptionId),
-        setIsFocused,
-        setInputRef,
-    };
-    return (<RadioGroupItemContext.Provider value={context}>
-      <Polymorphic as="div" role="group" onPointerDown={onPointerDown} {...dataset()} {...others}/>
-    </RadioGroupItemContext.Provider>);
+  const formControlContext = useFormControlContext();
+  const radioGroupContext = useRadioGroupContext();
+  const defaultId = `${formControlContext.generateId(
+    "item",
+  )}-${createUniqueId()}`;
+  props = mergeDefaultProps(
+    {
+      id: defaultId,
+    },
+    props,
+  );
+  const [local, others] = splitProps(props, [
+    "value",
+    "disabled",
+    "onPointerDown",
+  ]);
+  const [inputId, setInputId] = createSignal();
+  const [labelId, setLabelId] = createSignal();
+  const [descriptionId, setDescriptionId] = createSignal();
+  const [inputRef, setInputRef] = createSignal();
+  const [isFocused, setIsFocused] = createSignal(false);
+  const isSelected = createMemo(() => {
+    return radioGroupContext.isSelectedValue(local.value);
+  });
+  const isDisabled = createMemo(() => {
+    return local.disabled || formControlContext.isDisabled() || false;
+  });
+  const onPointerDown = (e) => {
+    callHandler(e, local.onPointerDown);
+    // For consistency with native, prevent the input blurs on pointer down.
+    if (isFocused()) {
+      e.preventDefault();
+    }
+  };
+  const dataset = createMemo(() => ({
+    ...formControlContext.dataset(),
+    "data-disabled": isDisabled() ? "" : undefined,
+    "data-checked": isSelected() ? "" : undefined,
+  }));
+  const context = {
+    value: () => local.value,
+    dataset,
+    isSelected,
+    isDisabled,
+    inputId,
+    labelId,
+    descriptionId,
+    inputRef,
+    select: () => radioGroupContext.setSelectedValue(local.value),
+    generateId: createGenerateId(() => others.id),
+    registerInput: createRegisterId(setInputId),
+    registerLabel: createRegisterId(setLabelId),
+    registerDescription: createRegisterId(setDescriptionId),
+    setIsFocused,
+    setInputRef,
+  };
+  return (
+    <RadioGroupItemContext.Provider value={context}>
+      <Polymorphic
+        as="div"
+        role="group"
+        onPointerDown={onPointerDown}
+        {...dataset()}
+        {...others}
+      />
+    </RadioGroupItemContext.Provider>
+  );
 }
